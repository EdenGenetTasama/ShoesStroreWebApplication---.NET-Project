#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoesStroreWebApplication__.NET_Project.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SportStoreDB")]
	public partial class SportEquipmentContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertsportEquipment(sportEquipment instance);
    partial void UpdatesportEquipment(sportEquipment instance);
    partial void DeletesportEquipment(sportEquipment instance);
    partial void InsertSportsClub(SportsClub instance);
    partial void UpdateSportsClub(SportsClub instance);
    partial void DeleteSportsClub(SportsClub instance);
    #endregion
		
		public SportEquipmentContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SportStoreDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SportEquipmentContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportEquipmentContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportEquipmentContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportEquipmentContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sportEquipment> sportEquipments
		{
			get
			{
				return this.GetTable<sportEquipment>();
			}
		}
		
		public System.Data.Linq.Table<SportsClub> SportsClubs
		{
			get
			{
				return this.GetTable<SportsClub>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sportEquipment")]
	public partial class sportEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _sportBranch;
		
		private string _productName;
		
		private string _productCompany;
		
		private int _productPrice;
		
		private int _productAmount;
		
		private System.Nullable<int> _SportClubsID;
		
		private string _linkToImage;
		
		private EntityRef<SportsClub> _SportsClub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnsportBranchChanging(string value);
    partial void OnsportBranchChanged();
    partial void OnproductNameChanging(string value);
    partial void OnproductNameChanged();
    partial void OnproductCompanyChanging(string value);
    partial void OnproductCompanyChanged();
    partial void OnproductPriceChanging(int value);
    partial void OnproductPriceChanged();
    partial void OnproductAmountChanging(int value);
    partial void OnproductAmountChanged();
    partial void OnSportClubsIDChanging(System.Nullable<int> value);
    partial void OnSportClubsIDChanged();
    partial void OnlinkToImageChanging(string value);
    partial void OnlinkToImageChanged();
    #endregion
		
		public sportEquipment()
		{
			this._SportsClub = default(EntityRef<SportsClub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sportBranch", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string sportBranch
		{
			get
			{
				return this._sportBranch;
			}
			set
			{
				if ((this._sportBranch != value))
				{
					this.OnsportBranchChanging(value);
					this.SendPropertyChanging();
					this._sportBranch = value;
					this.SendPropertyChanged("sportBranch");
					this.OnsportBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string productName
		{
			get
			{
				return this._productName;
			}
			set
			{
				if ((this._productName != value))
				{
					this.OnproductNameChanging(value);
					this.SendPropertyChanging();
					this._productName = value;
					this.SendPropertyChanged("productName");
					this.OnproductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCompany", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string productCompany
		{
			get
			{
				return this._productCompany;
			}
			set
			{
				if ((this._productCompany != value))
				{
					this.OnproductCompanyChanging(value);
					this.SendPropertyChanging();
					this._productCompany = value;
					this.SendPropertyChanged("productCompany");
					this.OnproductCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productPrice", DbType="Int NOT NULL")]
		public int productPrice
		{
			get
			{
				return this._productPrice;
			}
			set
			{
				if ((this._productPrice != value))
				{
					this.OnproductPriceChanging(value);
					this.SendPropertyChanging();
					this._productPrice = value;
					this.SendPropertyChanged("productPrice");
					this.OnproductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productAmount", DbType="Int NOT NULL")]
		public int productAmount
		{
			get
			{
				return this._productAmount;
			}
			set
			{
				if ((this._productAmount != value))
				{
					this.OnproductAmountChanging(value);
					this.SendPropertyChanging();
					this._productAmount = value;
					this.SendPropertyChanged("productAmount");
					this.OnproductAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportClubsID", DbType="Int")]
		public System.Nullable<int> SportClubsID
		{
			get
			{
				return this._SportClubsID;
			}
			set
			{
				if ((this._SportClubsID != value))
				{
					if (this._SportsClub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportClubsIDChanging(value);
					this.SendPropertyChanging();
					this._SportClubsID = value;
					this.SendPropertyChanged("SportClubsID");
					this.OnSportClubsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linkToImage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string linkToImage
		{
			get
			{
				return this._linkToImage;
			}
			set
			{
				if ((this._linkToImage != value))
				{
					this.OnlinkToImageChanging(value);
					this.SendPropertyChanging();
					this._linkToImage = value;
					this.SendPropertyChanged("linkToImage");
					this.OnlinkToImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SportsClub_sportEquipment", Storage="_SportsClub", ThisKey="SportClubsID", OtherKey="Id", IsForeignKey=true)]
		public SportsClub SportsClub
		{
			get
			{
				return this._SportsClub.Entity;
			}
			set
			{
				SportsClub previousValue = this._SportsClub.Entity;
				if (((previousValue != value) 
							|| (this._SportsClub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SportsClub.Entity = null;
						previousValue.sportEquipments.Remove(this);
					}
					this._SportsClub.Entity = value;
					if ((value != null))
					{
						value.sportEquipments.Add(this);
						this._SportClubsID = value.Id;
					}
					else
					{
						this._SportClubsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SportsClub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SportsClubs")]
	public partial class SportsClub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _sportTeam;
		
		private EntitySet<sportEquipment> _sportEquipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnsportTeamChanging(string value);
    partial void OnsportTeamChanged();
    #endregion
		
		public SportsClub()
		{
			this._sportEquipments = new EntitySet<sportEquipment>(new Action<sportEquipment>(this.attach_sportEquipments), new Action<sportEquipment>(this.detach_sportEquipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sportTeam", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string sportTeam
		{
			get
			{
				return this._sportTeam;
			}
			set
			{
				if ((this._sportTeam != value))
				{
					this.OnsportTeamChanging(value);
					this.SendPropertyChanging();
					this._sportTeam = value;
					this.SendPropertyChanged("sportTeam");
					this.OnsportTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SportsClub_sportEquipment", Storage="_sportEquipments", ThisKey="Id", OtherKey="SportClubsID")]
		public EntitySet<sportEquipment> sportEquipments
		{
			get
			{
				return this._sportEquipments;
			}
			set
			{
				this._sportEquipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sportEquipments(sportEquipment entity)
		{
			this.SendPropertyChanging();
			entity.SportsClub = this;
		}
		
		private void detach_sportEquipments(sportEquipment entity)
		{
			this.SendPropertyChanging();
			entity.SportsClub = null;
		}
	}
}
#pragma warning restore 1591
